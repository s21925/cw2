MongoDB shell version v4.4.4
connecting to: mongodb://127.0.0.1:27017/people2?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("68416dbc-ff9e-4fbd-9fc4-6363690e4e1b") }
MongoDB server version: 4.4.4
{
	"_batch" : [
		{
			"_id" : null,
			"uniqueOccupations" : [
				"Engineer I",
				"Environmental Specialist",
				"Database Administrator III",
				"VP Marketing",
				"Account Representative III",
				"VP Product Management",
				"Human Resources Assistant III",
				"Product Engineer",
				"Geologist I",
				"Staff Accountant III",
				"Computer Systems Analyst II",
				"Help Desk Operator",
				"Accounting Assistant I",
				"Automation Specialist I",
				"Developer IV",
				"Engineer II",
				"Staff Accountant IV",
				"Senior Cost Accountant",
				"Biostatistician III",
				"Librarian",
				"Research Associate",
				"Research Assistant I",
				"Quality Engineer",
				"Electrical Engineer",
				"Senior Developer",
				"Statistician II",
				"Graphic Designer",
				"Chemical Engineer",
				"Editor",
				"Biostatistician IV",
				"Community Outreach Specialist",
				"Web Designer IV",
				"Computer Systems Analyst III",
				"Administrative Assistant I",
				"Registered Nurse",
				"Health Coach I",
				"Health Coach III",
				"Programmer Analyst II",
				"Senior Financial Analyst",
				"Health Coach II",
				"Media Manager IV",
				"Staff Accountant I",
				"Environmental Tech",
				"Developer I",
				"Administrative Assistant II",
				"Office Assistant III",
				"Software Test Engineer III",
				"Computer Systems Analyst IV",
				"Staff Accountant II",
				"Associate Professor",
				"Developer III",
				"Nuclear Power Engineer",
				"Web Designer II",
				"Speech Pathologist",
				"Mechanical Systems Engineer",
				"Safety Technician II",
				"Programmer I",
				"Web Designer I",
				"Web Developer III",
				"Project Manager",
				"Financial Advisor",
				"Accountant III",
				"Statistician IV",
				"Media Manager II",
				"Occupational Therapist",
				"Tax Accountant",
				"Recruiter",
				"Software Engineer IV",
				"Compensation Analyst",
				"Executive Secretary",
				"Assistant Manager",
				"Web Developer II",
				"Junior Executive",
				"Human Resources Assistant I",
				"Accountant IV",
				"Director of Sales",
				"Web Designer III",
				"Geologist III",
				"Engineer IV",
				"Business Systems Development Analyst",
				"Research Assistant II",
				"Programmer Analyst III",
				"Account Representative IV",
				"Sales Representative",
				"Dental Hygienist",
				"Desktop Support Technician",
				"Financial Analyst",
				"Statistician I",
				"Cost Accountant",
				"Accounting Assistant IV",
				"Design Engineer",
				"Analog Circuit Design manager",
				"Clinical Specialist",
				"Human Resources Manager",
				"Accounting Assistant III",
				"Automation Specialist II",
				"Food Chemist",
				"Software Engineer III",
				"Help Desk Technician",
				"Analyst Programmer",
				"Database Administrator II",
				"Account Representative II",
				"Staff Scientist",
				"Budget/Accounting Analyst I",
				"Human Resources Assistant II",
				"Assistant Professor",
				"Research Nurse",
				"Database Administrator I",
				"Operator",
				"Professor",
				"Research Assistant IV",
				"Systems Administrator II",
				"Recruiting Manager",
				"Data Coordiator",
				"Software Test Engineer II",
				"Account Coordinator",
				"Accounting Assistant II",
				"Geologist II",
				"Budget/Accounting Analyst IV",
				"Civil Engineer",
				"Programmer Analyst I",
				"Web Developer IV",
				"Chief Design Engineer",
				"Senior Editor",
				"Statistician III",
				"Accountant II",
				"Quality Control Specialist",
				"Structural Engineer",
				"Human Resources Assistant IV",
				"Office Assistant II",
				"Marketing Manager",
				"Software Test Engineer IV",
				"Office Assistant IV",
				"Office Assistant I",
				"Biostatistician II",
				"Structural Analysis Engineer",
				"Legal Assistant",
				"Nurse Practicioner",
				"Pharmacist",
				"Computer Systems Analyst I",
				"Automation Specialist IV",
				"Accountant I",
				"Account Representative I",
				"Engineer III",
				"Marketing Assistant",
				"Nurse",
				"Administrative Officer",
				"Software Test Engineer I",
				"Web Developer I",
				"VP Sales",
				"Assistant Media Planner",
				"Database Administrator IV",
				"General Manager",
				"Payment Adjustment Coordinator",
				"Programmer IV",
				"Social Worker",
				"Systems Administrator IV",
				"Administrative Assistant III",
				"Paralegal",
				"Safety Technician IV",
				"Account Executive",
				"Budget/Accounting Analyst III",
				"Geologist IV",
				"VP Accounting",
				"Information Systems Manager",
				"Biostatistician I",
				"Research Assistant III",
				"Systems Administrator I",
				"Safety Technician III",
				"Internal Auditor",
				"GIS Technical Architect",
				"Automation Specialist III",
				"Budget/Accounting Analyst II",
				"Sales Associate",
				"Administrative Assistant IV",
				"Senior Sales Associate",
				"Programmer II",
				"Technical Writer",
				"Systems Administrator III",
				"Health Coach IV",
				"Senior Quality Engineer",
				"Programmer Analyst IV",
				"Developer II",
				"Software Engineer II",
				"Media Manager I",
				"Software Engineer I",
				"Teacher",
				"VP Quality Control",
				"Geological Engineer",
				"Actuary",
				"Software Consultant",
				"Physical Therapy Assistant",
				"Media Manager III",
				"Safety Technician I",
				"Programmer III"
			]
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong(0),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "people2.people",
	"_db" : people2,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
